One aspect of imp programming that can be confusing to some programmers is its event-driven nature.
Programs are written in such a way that they do nothing, or at least very little, until an event actually takes place.
This approach can be a hard one for some programmers to become accustomed to.
The imp, however, has its own operating system, impOS, which performs many tasks on your behalf.
impOS allows you to focus on the functionality that governs your application's unique behavior.
An event-driven programming model allows impOS to continue to perform the tasks it needs to perform.
impOS ensures your code gets the resources to manage its own tasks when necessary.
What is an event?
An event is any user action or system action to which the application firmware needs to respond or simply know has taken place.
On a desktop computer, there are hundreds of possible events that a program may need to be prepared for.
Which events a program cares about will depend entirely on what that application is trying to achieve.
A program can also trigger events of its own.
imps work in the same way.
Agent and device code can be informed when certain events, some external, others generated by the code itself, have taken place.
Again, this lets you focus on the incidents that matter to you and ignore those that don't.
It frees you from having to monitor events manually and to check each one just in case it is one your code needs to respond to.
In this sense, the imp API is the code equivalent of a front door bell.
Isn't it better to get up from your armchair and go to the front door only when the bell rings, rather than stand up every few minutes, walk to the door, open it and look out just in case someone might happen to be visiting?
impOS provides a number of API methods to allow your agent and device code to respond to events.
Your agent code is given the device object, which represents the imp-enabled hardware it is paired with.
Likewise, the device code is provided with an agent object.
Both of these objects include event-driven methods: agent.on() and device.on().
You can use either or both of these methods to nominate a function that will be called automatically in response to the arrival of messages.
Internet of Things devices are usually intended to remain connected to the Internet at all times.
Users’ broadband connections go down.
WiFi routers crash.
Businesses may have redundancy on these resources, but consumers rarely do.
The developer may even decide that it is advantageous if the device disconnects itself.
An imp remains in this ‘snooze’ state for nine minutes.